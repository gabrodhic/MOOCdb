6.885 Lecture 13 (Graph Processing) - 10/22/13

Why do you think there have been so many systems for processing graphs recently?
- the internet (and other large groups) are graphs, and we want to understand them (social graphs)
- transportation
- in general, you can think of interactions as a graph (Palantir lol)
- recommendations can be thought of as a problem on a graph
- semantic nets
- graphical models

Supersteps
- vertex-centric
- per vertex "compute" functions
  - can read messages from the previous superstep
  - can pass messages to the next superstep
  - update state
  - you can mutate the graph

Pregel programming model
- Why is it good?
  - you only have to think about your vertex, you don't have to worry about other nodes

Aggregate
- global state kept in the master node
- this state is distributed out to the worker nodes, and the workers update that state

Fault Tolerance
- master sends 'heartbeat' ping messages periodically and when it doesn't get one back it declares the
  node to be dead
- master also sends 'checkpoint' messages so that its slaves will 'dump' its state so it's available even when it dies.
- on failure, you rollback every node in the cluster to the latest checkpoint.

How could you implement Pregel in an RDBMS with UDF capability?
  - Table structure?
  - UDF (table) -> table

- Messages table that stores src, dest, and message_val
- Edges table with src, dest, and weight
- For each node n, select all old messages and select for new messages, and then update the tables

GraphLab
- instead of sending messages to its neighbors, you can read state from your neighbors
- otherwise, it's the same as Pregel (same compute paradigm)

