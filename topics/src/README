**Example command to load mock data and output**
./community_analysis.py --mock mock_data.csv --output_csv mock_class_data

This command will create three files: mock_class_data_communitygraph, mock_class_data_community, mock_class_data_student. Each file is list of all objects of a given type and the feature defined for them. For uexample, out_student is a list of all students in the community graph. Each row represents a student. A student has two features: node_id,community_id. More feature can be added in the future.


**How to create mock data**
The community analysis operates on an edge list extracted from a directed graph of how students interact with each other in a forum. The edge list should be inputted as a csv where the columns are child_student, parent_student, weight. In our analysis so far, the weight is number of posts the child_student has made in reply to the parent_student. The child/parent is inferred from each forum post being part of a thread. 

For example, say we have the following forum information
- student 1 has replied to student 2 once
- student 2 has replied to student 3 twice
- student 3 has replied to student 1 three times

This would look like the following
1,2,1
2,3,2
3,1,3

If you want a more developed example, this is provided in mock_data.csv.


**Adding features to outputted files**
Each file is the enumeration of instances of a particular class. The class right now are CommunityGraph, Community, and Student. Each class has a list of of properties at the top of the class definition that get exported. To add another property, simply add a string to this list. If you actually want the property to be a method you can do something like the following inside the class definition


class CommunityGraph:
    features = ["num_communities", "average_community_size", "max_community_size"]
    ...
	@property
    def average_community_size(self):
        s = self.community_sizes()
        return float(sum(s))/len(s)

